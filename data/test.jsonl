{"script": "Config:\n    Number of players: 6\n    Min bet: 2\n    Max bet: 10000\n    Suit: ['P', 'J', 'O', 'Z', 'I', 'C', 'Q']\n    Suit have rank: False\n    Card value rank: [6, 11, 1, 15, 8, 4, 2, 7, 14, 16, 18, 5, 12, 13, 19, 3, 9, 17, 0]\n    Card combinations rank: ['Two Pair', 'Full House', 'Three of a Kind', 'Four of a Kind', 'Straight', 'Straight Flush', 'Flush', 'High Card', 'Pair']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/4 minimum bet for small blind and minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Burn one card from the deck. Flop x cards to the community. After each one flop, burn one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 6\n    self.min_bet = 2\n    self.max_bet = 10000\n    self.suit = ['P', 'J', 'O', 'Z', 'I', 'C', 'Q']\n    self.suit_have_rank = False\n    self.value = [str(v) for v in [6, 11, 1, 15, 8, 4, 2, 7, 14, 16, 18, 5, 12, 13, 19, 3, 9, 17, 0]]\n    self.card_combinations_rank = ['Two Pair', 'Full House', 'Three of a Kind', 'Four of a Kind', 'Straight', 'Straight Flush', 'Flush', 'High Card', 'Pair']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 4)\n    bet(big_blind, self.min_bet)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n        self.deck.pop()\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 3\n    Min bet: 10\n    Max bet: 2000\n    Suit: ['V', 'F', 'A']\n    Suit have rank: False\n    Card value rank: [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]\n    Card combinations rank: ['Flush', 'Three of a Kind', 'Straight', 'High Card', 'Pair', 'Straight Flush', 'Full House', 'Four of a Kind', 'Two Pair']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/4 minimum bet for small blind and minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Turn x cards from the deck to the community. Reverse the community.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 3\n    self.min_bet = 10\n    self.max_bet = 2000\n    self.suit = ['V', 'F', 'A']\n    self.suit_have_rank = False\n    self.value = [str(v) for v in [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]]\n    self.card_combinations_rank = ['Flush', 'Three of a Kind', 'Straight', 'High Card', 'Pair', 'Straight Flush', 'Full House', 'Four of a Kind', 'Two Pair']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 4)\n    bet(big_blind, self.min_bet)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    self.community.reverse()\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 4\n    Min bet: 4\n    Max bet: 10000\n    Suit: ['S', 'N', 'I', 'O', 'P']\n    Suit have rank: False\n    Card value rank: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['Straight Flush', 'Straight', 'Flush', 'Four of a Kind', 'Pair', 'Three of a Kind', 'Full House', 'Two Pair', 'High Card']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal4', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 4\n    self.min_bet = 4\n    self.max_bet = 10000\n    self.suit = ['S', 'N', 'I', 'O', 'P']\n    self.suit_have_rank = False\n    self.value = [str(v) for v in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['Straight Flush', 'Straight', 'Flush', 'Four of a Kind', 'Pair', 'Three of a Kind', 'Full House', 'Two Pair', 'High Card']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal4', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 5\n    Min bet: 2\n    Max bet: 500\n    Suit: ['T', 'A', 'G', 'F']\n    Suit have rank: True\n    Card value rank: [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]\n    Card combinations rank: ['Pair', 'Four of a Kind', 'Straight', 'Straight Flush', 'Flush', 'Full House', 'Three of a Kind', 'High Card', 'Two Pair']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player. After each round of deals to all players, discard 1 card from the deck and shuffle the deck.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 5\n    self.min_bet = 2\n    self.max_bet = 500\n    self.suit = ['T', 'A', 'G', 'F']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]]\n    self.card_combinations_rank = ['Pair', 'Four of a Kind', 'Straight', 'Straight Flush', 'Flush', 'Full House', 'Three of a Kind', 'High Card', 'Two Pair']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n        self.deck.pop()\n        shuffle(self.deck)\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 3\n    Min bet: 8\n    Max bet: 10000\n    Suit: ['S', 'N', 'Y', 'V', 'W']\n    Suit have rank: True\n    Card value rank: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['Four of a Kind', 'Three of a Kind', 'High Card', 'Straight Flush', 'Pair', 'Full House', 'Two Pair', 'Straight', 'Flush']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player. After all cards have been dealt to all players, shuffle the deck.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Turn x cards from the deck to the community. Reverse the community.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 3\n    self.min_bet = 8\n    self.max_bet = 10000\n    self.suit = ['S', 'N', 'Y', 'V', 'W']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['Four of a Kind', 'Three of a Kind', 'High Card', 'Straight Flush', 'Pair', 'Full House', 'Two Pair', 'Straight', 'Flush']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    shuffle(self.deck)\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    self.community.reverse()\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 3\n    Min bet: 10\n    Max bet: 2000\n    Suit: ['T', 'D', 'I']\n    Suit have rank: True\n    Card value rank: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['Two Pair', 'Pair', 'Flush', 'Three of a Kind', 'Straight', 'High Card', 'Full House', 'Four of a Kind', 'Straight Flush']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 3\n    self.min_bet = 10\n    self.max_bet = 2000\n    self.suit = ['T', 'D', 'I']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['Two Pair', 'Pair', 'Flush', 'Three of a Kind', 'Straight', 'High Card', 'Full House', 'Four of a Kind', 'Straight Flush']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 4\n    Min bet: 4\n    Max bet: 10000\n    Suit: ['S', 'N', 'I', 'O', 'P']\n    Suit have rank: False\n    Card value rank: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['High Card', 'Flush', 'Two Pair', 'Four of a Kind', 'Straight', 'Pair', 'Full House', 'Straight Flush', 'Three of a Kind']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal4', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 4\n    self.min_bet = 4\n    self.max_bet = 10000\n    self.suit = ['S', 'N', 'I', 'O', 'P']\n    self.suit_have_rank = False\n    self.value = [str(v) for v in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['High Card', 'Flush', 'Two Pair', 'Four of a Kind', 'Straight', 'Pair', 'Full House', 'Straight Flush', 'Three of a Kind']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal4', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 5\n    Min bet: 2\n    Max bet: 500\n    Suit: ['T', 'A', 'G', 'F']\n    Suit have rank: True\n    Card value rank: [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]\n    Card combinations rank: ['Straight', 'Four of a Kind', 'Flush', 'High Card', 'Two Pair', 'Full House', 'Pair', 'Three of a Kind', 'Straight Flush']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player. After each round of deals to all players, discard 1 card from the deck and shuffle the deck.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 5\n    self.min_bet = 2\n    self.max_bet = 500\n    self.suit = ['T', 'A', 'G', 'F']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [7, 3, 2, 20, 18, 11, 6, 8, 4, 17, 12, 9, 5]]\n    self.card_combinations_rank = ['Straight', 'Four of a Kind', 'Flush', 'High Card', 'Two Pair', 'Full House', 'Pair', 'Three of a Kind', 'Straight Flush']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n        self.deck.pop()\n        shuffle(self.deck)\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 3\n    Min bet: 8\n    Max bet: 10000\n    Suit: ['S', 'N', 'Y', 'V', 'W']\n    Suit have rank: True\n    Card value rank: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['Four of a Kind', 'Pair', 'Three of a Kind', 'High Card', 'Straight', 'Full House', 'Straight Flush', 'Flush', 'Two Pair']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player. After all cards have been dealt to all players, shuffle the deck.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Turn x cards from the deck to the community. Reverse the community.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 3\n    self.min_bet = 8\n    self.max_bet = 10000\n    self.suit = ['S', 'N', 'Y', 'V', 'W']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['Four of a Kind', 'Pair', 'Three of a Kind', 'High Card', 'Straight', 'Full House', 'Straight Flush', 'Flush', 'Two Pair']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    shuffle(self.deck)\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    self.community.reverse()\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal3', 'bet', 'flop3', 'bet', 'flop1', 'show', 'prize']"}
{"script": "Config:\n    Number of players: 3\n    Min bet: 10\n    Max bet: 2000\n    Suit: ['T', 'D', 'I']\n    Suit have rank: True\n    Card value rank: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\n    Card combinations rank: ['Straight Flush', 'Straight', 'Two Pair', 'Pair', 'Flush', 'Three of a Kind', 'Full House', 'Four of a Kind', 'High Card']\n\nPhase:\n    start: Configure the game and prepare the deck and chips for all players.\n    shuffle: Shuffle the deck.\n    blind: Randomly choose two players as small blind and big blind respectively. Place 1/2 minimum bet for small blind and double minimum bet for big blind.\n    dealx: Deal x cards to each player and discard 1 cards from the deck afterward.\n    switch: Query each player to discard a number of cards and draw the same number of new cards from the deck.\n    bet: Query each player to bet until all unfolded players have placed the highest bet or there is only one unfolded player.\n    flopx: Discard one card from the deck. Flop x cards from the deck to the community. If the last flopped card is a Heart, flop one more card.\n    show: Calculate the highest five-card hand of each player from hole cards and community cards.\n    prize: Determine the winners with the highest five-card hand and split the prize pool to them.\n\nFlow: ['start', 'shuffle', 'blind', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']", "code": "def config(self):\n    self.n_players = 3\n    self.min_bet = 10\n    self.max_bet = 2000\n    self.suit = ['T', 'D', 'I']\n    self.suit_have_rank = True\n    self.value = [str(v) for v in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]]\n    self.card_combinations_rank = ['Straight Flush', 'Straight', 'Two Pair', 'Pair', 'Flush', 'Three of a Kind', 'Full House', 'Four of a Kind', 'High Card']\n\ndef start(self):\n    self.deck = []\n    self.community = []\n    for v in self.value:\n        for s in self.suit:\n            self.deck += [''.join([s,v])]\n    \n    for i in range(self.n_players):\n        self.players[f'p{i+1}'].hole = []\n        self.players[f'p{i+1}'].fold = False\n\ndef shuffle(self):\n    shuffle(self.deck)\n\ndef blind(self):\n    def bet(player_id, amount):\n        self.players[player_id].bet += amount\n        self.players[player_id].remain -= amount\n        \n    small_blind, big_blind = random_choice(self.player_ids, 2)\n    bet(small_blind, self.min_bet // 2)\n    bet(big_blind, self.min_bet * 2)\n\ndef dealx(self, x):\n    for i in range(x):\n        for p in self.players:\n            self.players[p].hole += [self.deck.pop()]\n    self.deck.pop()\n        \ndef switch(self, switch_indices, player_id):\n    for i in switch_indices:\n        self.players[player_id].hole[i] = self.deck.pop()\n\ndef bet_done(self, wait_to_bet):\n    all_bet = [self.players[p].bet for p in self.get_unfold_players()]\n    if not wait_to_bet and all([b==all_bet[0] for b in all_bet]):\n        return True\n    return False\n\ndef flopx(self, x):\n    self.deck.pop()\n    for i in range(x):\n        self.community += [self.deck.pop()]\n    if self.community[-1][0] == 'H':\n        self.community += [self.deck.pop()]\n    \ndef set_flow(self):\n    self.flow = ['start', 'shuffle', 'blind', 'deal2', 'bet', 'flop3', 'bet', 'flop1', 'bet', 'flop1', 'bet', 'show', 'prize']"}
